Home Score App Version 6 6/18/25  <!DOCTYPE html>
<html>
<head>
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
  <title>Home Inspection Insights</title>
  <link rel="preload" href="https://cdn.jsdelivr.net/npm/chart.js@4.4.2/dist/chart.umd.min.js" as="script">
  <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.2/dist/chart.umd.min.js"></script>
  <style>
    * {
      box-sizing: border-box;
    }
    html, body {
      margin: 0;
      padding: 0;
      font-family: Arial, sans-serif;
      background-color: #f9fafb;
      color: #1f2937;
      overflow-x: hidden;
      overscroll-behavior: none;
    }
    h2 {
      margin: 0;
      padding: 12px 0;
      font-size: 22px;
      font-weight: 600;
      color: #1f2937;
      text-align: center;
      background-color: #f9fafb;
      position: sticky;
      top: 0;
      z-index: 1000;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    main {
      padding: 12px;
      padding-bottom: 60px;
      max-width: 100%;
      margin: 0 auto;
    }
    .screen {
      display: none;
    }
    .screen.active {
      display: block;
    }
    .home-actions {
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 12px;
      margin: 20px 0;
    }
    .action-card {
      background: #ffffff;
      border-radius: 8px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
      padding: 16px;
      width: 100%;
      max-width: 350px;
      text-align: center;
      cursor: pointer;
      transition: transform 0.2s, box-shadow 0.2s;
    }
    .action-card:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    }
    .action-card h3 {
      margin: 0 0 8px;
      font-size: 16px;
      color: #1f2937;
    }
    .action-card p {
      margin: 0;
      font-size: 14px;
      color: #4b5563;
    }
    .chart-container {
      background: #ffffff;
      padding: 8px;
      border-radius: 8px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
      margin: 12px 0;
      min-height: 270px;
    }
    canvas {
      max-width: 100%;
      width: 100%;
      height: 100% !important;
    }
    .slider-container {
      margin: 12px 0;
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 8px;
    }
    .slider-header {
      display: flex;
      align-items: center;
      gap: 10px;
    }
    .slider-label {
      font-size: 16px;
      font-weight: 600;
      color: #1f2937;
    }
    .slider-container input[type="range"] {
      width: 200px;
      -webkit-appearance: none;
      background: #e5e7eb;
      border-radius: 5px;
      height: 7px;
    }
    .slider-container input[type="range"]::-webkit-slider-thumb {
      -webkit-appearance: none;
      width: 20px;
      height: 20px;
      background: #f59e0b;
      border-radius: 50%;
      cursor: pointer;
      box-shadow: 0 0 5px rgba(245, 158, 11, 0.3);
    }
    .risk-badge {
      font-size: 13px;
      color: #dc2626;
      background: #fef2f2;
      padding: 2px 8px;
      border-radius: 8px;
    }
    .table-container {
      margin: 12px 0;
      overflow-x: auto;
      background: #ffffff;
      border-radius: 8px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }
    table {
      width: 100%;
      border-collapse: collapse;
    }
    tr:nth-child(even) {
      background: #f9fafb;
    }
    tr.at-risk td:first-child {
      font-weight: 600;
    }
    tr {
      cursor: pointer;
    }
    th, td {
      padding: 8px;
      border: 1px solid #d1d5db;
      text-align: left;
      font-size: 13px;
      color: #1f2937;
    }
    th {
      background: #e5e7eb;
      font-weight: 600;
    }
    td:nth-child(1) { width: 40%; }
    td:nth-child(2), td:nth-child(3), td:nth-child(4) { width: 15%; }
    select {
      padding: 4px;
      border: 1px solid #d1d5db;
      border-radius: 4px;
      width: 100%;
      font-size: 13px;
      background: #ffffff;
      color: #1f2937;
    }
    .summary {
      margin: 12px 0;
      font-size: 14px;
      color: #1f2937;
      text-align: center;
    }
    .button-container {
      margin: 12px 0;
      text-align: center;
    }
    .reset-button {
      padding: 8px 16px;
      border: 1px solid #d1d5db;
      border-radius: 6px;
      background: linear-gradient(to right, #fef2f2, #fff7ed);
      color: #1f2937;
      font-size: 14px;
      cursor: pointer;
    }
    .reset-button:hover {
      background: linear-gradient(to right, #fee2e2, #ffedd5);
    }
    .bottom-nav {
      position: fixed;
      bottom: 0;
      width: 100%;
      background: #ffffff;
      box-shadow: 0 -2px 4px rgba(0,0,0,0.1);
      display: flex;
      justify-content: space-around;
      padding: 8px 0;
      z-index: 1000;
    }
    .nav-item {
      flex: 1;
      text-align: center;
      color: #4b5563;
      font-size: 14px;
      cursor: pointer;
      padding: 8px;
    }
    .nav-item.active {
      color: #f59e0b;
      font-weight: 600;
    }
    .nav-item:hover {
      background: #f9fafb;
    }
    #errorMessage {
      color: #dc2626;
      margin: 12px;
      display: none;
      font-size: 14px;
      text-align: center;
    }
    @media (min-width: 601px) {
      h2 {
        font-size: 24px;
      }
      main {
        padding: 16px;
      }
      .chart-container {
        min-height: 300px;
        padding: 12px;
      }
      .slider-container input[type="range"] {
        width: 250px;
      }
      .slider-label, .risk-badge {
        font-size: 16px;
      }
      th, td {
        font-size: 15px;
      }
    }
  </style>
</head>
<body>
  <h2>Home Inspection Insights</h2>
  <main>
    <div id="homeScreen" class="screen active">
      <div class="home-actions">
        <div class="action-card" data-action="setHouseAge">
          <h3>Set House Age</h3>
          <p>Enter the age of your home to see risks.</p>
        </div>
        <div class="action-card" data-action="scanComponentAges">
          <h3>Adjust Component Ages</h3>
          <p>Customize individual component ages.</p>
        </div>
        <div class="action-card" data-action="viewRisks">
          <h3>View At-Risk Components</h3>
          <p>See components needing attention.</p>
        </div>
        <div class="action-card" data-action="getPlan">
          <h3>Get Personalized Plan</h3>
          <p>Receive a tailored maintenance plan.</p>
        </div>
      </div>
    </div>
    <div id="lifecycleScreen" class="screen">
      <div class="slider-container" id="sliderContainer">
        <div class="slider-header">
          <div class="slider-label">
            House Age: <span id="houseAgeValue" aria-live="polite">0</span> yrs
          </div>
          <span id="relevantCount" class="risk-badge" aria-label="Number of at-risk components" aria-live="polite"></span>
        </div>
        <input type="range" id="houseAge" min="0" max="100" value="0" step="1" aria-labelledby="houseAgeLabel" aria-describedby="sliderDescription" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">
      </div>
      <div class="chart-container">
        <canvas id="scatterChart" role="img" aria-label="Scatter plot of lifecycle components"></canvas>
      </div>
      <div class="table-container">
        <table role="grid" aria-label="Lifecycle components details">
          <thead id="tableHeader"></thead>
          <tbody id="componentsTableBody"></tbody>
        </table>
      </div>
      <div class="button-container">
        <button class="reset-button" id="resetButton" aria-label="Reset all component ages to default">Reset Ages</button>
      </div>
    </div>
    <div id="defectsScreen" class="screen">
      <div class="chart-container">
        <canvas id="defectsChart" role="img" aria-label="Bar chart of hidden defects"></canvas>
      </div>
      <div class="summary" id="summaryText"></div>
      <div class="table-container">
        <table role="grid" aria-label="Hidden defects details">
          <thead id="defectsTableHeader"></thead>
          <tbody id="defectsTableBody"></tbody>
        </table>
      </div>
    </div>
    <div id="maintenanceScreen" class="screen">
      <div class="chart-container">
        <canvas id="maintenanceChart" role="img" aria-label="Bar chart of immediate maintenance"></canvas>
      </div>
      <div class="table-container">
        <table role="grid" aria-label="Immediate maintenance details">
          <thead id="maintenanceTableHeader"></thead>
          <tbody id="maintenanceTableBody"></tbody>
        </table>
      </div>
    </div>
    <div id="errorMessage"></div>
  </main>
  <nav class="bottom-nav">
    <div class="nav-item active" data-tab="home">Home</div>
    <div class="nav-item" data-tab="lifecycle">Lifecycle</div>
    <div class="nav-item" data-tab="defects">Defects</div>
    <div class="nav-item" data-tab="maintenance">Maintenance</div>
  </nav>
  <script>
    const logWithTimestamp = (message) => {
      console.log(`[${new Date().toISOString()}] ${message}`);
    };

    const allComponents = [
      { name: 'Roofing (Asphalt Shingles)', lifespan: 22.5, cost: 12000, manualAge: null },
      { name: 'HVAC System', lifespan: 17.5, cost: 18000, manualAge: null },
      { name: 'Water Heater (Tank)', lifespan: 10, cost: 2500, manualAge: null },
      { name: 'Water Heater (Tankless)', lifespan: 17.5, cost: 5000, manualAge: null },
      { name: 'Gutters (Aluminum/Vinyl)', lifespan: 25, cost: 4500, manualAge: null },
      { name: 'Windows (Vinyl)', lifespan: 25, cost: 22000, manualAge: null },
      { name: 'Exterior Siding', lifespan: 30, cost: 20000, manualAge: null },
      { name: 'Driveway (Concrete)', lifespan: 35, cost: 12000, manualAge: null },
      { name: 'Deck', lifespan: 12.5, cost: 15000, manualAge: null },
      { name: 'Plumbing (Cast Iron Drain Line)', lifespan: 50, cost: 15000, manualAge: null },
      { name: 'Garage Door', lifespan: 22.5, cost: 4000, manualAge: null },
      { name: 'Carpet', lifespan: 10, cost: 6000, manualAge: null },
      { name: 'Refrigerator', lifespan: 12.5, cost: 3000, manualAge: null },
      { name: 'Oven/Range', lifespan: 12.5, cost: 2500, manualAge: null },
      { name: 'Dishwasher', lifespan: 10, cost: 1500, manualAge: null },
      { name: 'Washer/Dryer', lifespan: 12, cost: 3000, manualAge: null },
      { name: 'Septic System', lifespan: 30, cost: 25000, manualAge: null },
      { name: 'Well Pump', lifespan: 11.5, cost: 5000, manualAge: null },
      { name: 'Attic Insulation', lifespan: 25, cost: 5000, manualAge: null },
      { name: 'Fireplace Insert', lifespan: 20, cost: 5000, manualAge: null },
      { name: 'Smoke/CO Detectors', lifespan: 7.5, cost: 500, manualAge: null },
      { name: 'Water Softener', lifespan: 15, cost: 3000, manualAge: null },
      { name: 'Fencing (Wood)', lifespan: 15, cost: 8000, manualAge: null },
      { name: 'Sprinkler System', lifespan: 20, cost: 7000, manualAge: null },
      { name: 'Pool Pump/Filter', lifespan: 10, cost: 2500, manualAge: null }
    ];

    const hiddenDefects = [
      { name: 'Foundation Perimeter Soils Heaving/Settling', risk: 24 },
      { name: 'Foundation Repairs Present', risk: 12 },
      { name: 'Roofing Seek Repairs/Replacement', risk: 45 },
      { name: 'Insulation Insufficient Depth/Missing', risk: 30 },
      { name: 'Insulation Pest Damage', risk: 13 },
      { name: 'Structural Truss Repairs Needed', risk: 31 },
      { name: 'Moisture Intrusion Leaks Present', risk: 45 },
      { name: 'Insulation Inadequate Behind Walls/Ceilings', risk: 41 },
      { name: 'Windows Failed Seal(s)', risk: 33 },
      { name: 'Electrical Wiring Circuit Deficiencies', risk: 26 },
      { name: 'Electrical Receptacles Missing GFCI Protection', risk: 40 },
      { name: 'HVAC Insufficient Makeup/Combustion Air', risk: 16 },
      { name: 'HVAC Operational Service Life Reached', risk: 16 },
      { name: 'HVAC Under/Oversized', risk: 18 },
      { name: 'HVAC System Repairs Needed', risk: 26 },
      { name: 'HVAC Evaluate/Balance HVAC Zones', risk: 29 },
      { name: 'Plumbing Supply Damaged', risk: 24 },
      { name: 'Plumbing Fixtures Damaged', risk: 32 },
      { name: 'Plumbing Leak Detected', risk: 32 },
      { name: 'Water Heater Damaged', risk: 45 },
      { name: 'Main Drain Standing Water/Debris', risk: 43 },
      { name: 'Main Drain Cast Iron Damaged', risk: 37 }
    ];

    const immediateMaintenance = [
      { name: 'Concrete Damages Present', risk: 24 },
      { name: 'Grading Improper Drainage', risk: 12 },
      { name: 'Roof Flashings Maintenance Needed', risk: 45 },
      { name: 'Roof Decking Sagging', risk: 22 },
      { name: 'Rodent Accesses Present', risk: 13 },
      { name: 'Wallboard Damages/Wavy', risk: 20 },
      { name: 'Lintels Rusted', risk: 18 },
      { name: 'Door Out of Square', risk: 17 },
      { name: 'Windows Damaged', risk: 16 },
      { name: 'HVAC Emergency Float Switch Not Present', risk: 15 },
      { name: 'HVAC Condensate Drain Damaged', risk: 14 },
      { name: 'HVAC Rust Present In Secondary Pan', risk: 12 },
      { name: 'Plumbing Insulation Needed', risk: 11 },
      { name: 'Sprinkler System Damaged', risk: 10 },
      { name: 'Dryer Exhaust System Cleaning', risk: 9 }
    ];

    const highVisibilityComponents = [
      'Roofing (Asphalt Shingles)',
      'HVAC System',
      'Water Heater (Tank)',
      'Water Heater (Tankless)',
      'Windows (Vinyl)',
      'Exterior Siding',
      'Septic System'
    ];

    const maxLifespan = Math.max(...allComponents.map(c => c.lifespan));
    const maxCost = Math.max(...allComponents.map(c => c.cost));
    logWithTimestamp(`Maximum component lifespan: ${maxLifespan}, Maximum cost: ${maxCost}`);

    const ageRanges = [
      { label: 'Select', value: null },
      { label: '0–3 yrs', value: 1.5 },
      { label: '3–5 yrs', value: 4 },
      { label: '5–7 yrs', value: 6 },
      { label: '7–10 yrs', value: 8.5 },
      { label: '10–15 yrs', value: 12.5 },
      { label: '15+ yrs', value: 'max' }
    ];

    const getRiskColor = (riskScore) => {
      if (riskScore < 0.3) return '#1e3a8a'; // Blue
      if (riskScore < 0.7) return '#f59e0b'; // Orange
      return '#dc2626'; // Red
    };

    const getBackgroundColor = (riskScore) => {
      if (riskScore < 0.3) return '#eff6ff';
      if (riskScore < 0.7) return '#fefce8';
      return '#fee2e2';
    };

    const getTop10Components = houseAge => {
      logWithTimestamp(`Calculating top 10 components for houseAge: ${houseAge}`);
      const filteredComponents = allComponents.filter(c => {
        if (c.name === 'Plumbing (Cast Iron Drain Line)') {
          return houseAge > 55;
        }
        return true;
      });
      const componentsWithAge = filteredComponents.map(c => {
        const age = c.manualAge ?? houseAge;
        const replacementWindow = c.lifespan * 0.1; // ±10% lifespan
        const isHighVisibility = highVisibilityComponents.includes(c.name);
        const postLifecycleWindow = isHighVisibility || c.cost >= 5000 ? c.lifespan * 0.2 : 0; // 20% for high-visibility or high-cost
        const cycle = Math.abs(age - c.lifespan) <= replacementWindow ? 0 : Math.floor(age / c.lifespan);
        const lastReplacement = cycle * c.lifespan;
        const currentAge = cycle === 0 ? age : age - lastReplacement;
        const displayAge = (age > c.lifespan && age <= c.lifespan + postLifecycleWindow) ? age : currentAge;
        const remainingLife = c.lifespan - currentAge;
        const remainingLifePercent = (remainingLife / c.lifespan) * 100;
        let riskScore = 0;
        let status = 'Good condition';
        if (houseAge === 0 || age === 0 || (remainingLifePercent >= 40 && age < c.lifespan - 1)) {
          riskScore = 0;
        } else if ((21 <= remainingLifePercent && remainingLifePercent < 40) || (age > c.lifespan + postLifecycleWindow / 2 && age <= c.lifespan + postLifecycleWindow && remainingLifePercent >= 21)) {
          riskScore = 0.5;
          status = 'Consider monitoring, nearing replacement';
        } else if (remainingLifePercent < 21 || (age >= c.lifespan - 1 && age <= c.lifespan + postLifecycleWindow / 2)) {
          riskScore = 0.9;
          status = 'Plan for replacement soon';
          const defectMatch = hiddenDefects.find(d => d.name.toLowerCase().includes(c.name.toLowerCase().split(' ')[0]));
          if (defectMatch) {
            riskScore = Math.max(riskScore, defectMatch.risk / 100);
          }
        }
        const costWeight = (c.cost / maxCost) ** 1.5;
        const score = riskScore * costWeight;
        logWithTimestamp(`Component: ${c.name}, HouseAge: ${houseAge}, CurrentAge: ${currentAge}, DisplayAge: ${displayAge}, RemainingLife%: ${remainingLifePercent.toFixed(2)}, RiskScore: ${riskScore}, Cost: ${c.cost}, Score: ${score}, LastReplacement: ${lastReplacement}`);
        const overdueAmount = currentAge > c.lifespan ? currentAge - c.lifespan : 0;
        const proximity = Math.abs(currentAge - c.lifespan);
        return { ...c, currentAge, displayAge, remainingLifePercent, riskScore, score, overdueAmount, proximity, rawAge: age, status, isHighVisibility };
      });
      const prioritizedComponents = componentsWithAge
        .filter(c => c.score > 0 || ((c.isHighVisibility || c.cost >= 5000) && c.rawAge <= c.lifespan + (c.isHighVisibility || c.cost >= 5000 ? c.lifespan * 0.2 : 0)))
        .sort((a, b) => {
          if (a.score !== b.score) return b.score - a.score;
          if (a.cost !== b.cost) return b.cost - a.cost;
          return a.proximity - b.proximity;
        });
      const lowRisk = componentsWithAge
        .filter(c => c.score === 0 && (c.isHighVisibility || c.cost >= 5000) && c.rawAge <= c.lifespan + (c.isHighVisibility || c.cost >= 5000 ? c.lifespan * 0.2 : 0))
        .sort((a, b) => b.cost - a.cost);
      const topComponents = [...prioritizedComponents];
      if (topComponents.length < 3) {
        topComponents.push(...lowRisk.slice(0, 3 - topComponents.length));
      }
      return topComponents.slice(0, 10);
    };

    let scatterChart;
    const setHouseAge = () => {
      switchTab('lifecycle');
      const slider = document.getElementById('houseAge');
      if (slider) {
        slider.focus();
      }
    };

    const scanComponentAges = () => {
      switchTab('lifecycle');
      alert('Use the table below the chart to adjust individual component ages.');
    };

    const viewRisks = () => {
      switchTab('lifecycle');
    };

    const getPlan = () => {
      const houseAge = parseInt(document.getElementById('houseAge')?.value || 0);
      const top10 = getTop10Components(houseAge);
      const atRisk = top10.filter(c => c.riskScore >= 0.3);
      let plan = 'Your Home Maintenance Plan:\n';
      if (atRisk.length === 0) {
        plan += 'No components currently require immediate attention.';
      } else {
        atRisk.forEach(c => {
          plan += `- ${c.name}: ${c.status} (Age: ${c.displayAge.toFixed(1)} yrs, Lifespan: ${c.lifespan} yrs, Cost: $${c.cost})\n`;
        });
      }
      alert(plan);
    };

    const initializeChart = (tab = 'lifecycle') => {
      const canvas = document.getElementById(tab === 'lifecycle' ? 'scatterChart' : tab === 'defects' ? 'defectsChart' : 'maintenanceChart');
      if (!canvas) {
        logWithTimestamp('Canvas element not found.');
        const errorMessage = document.getElementById('errorMessage');
        if (errorMessage) {
          errorMessage.style.display = 'block';
          errorMessage.textContent = 'Chart canvas not found.';
        }
        return;
      }
      try {
        const ctx = canvas.getContext('2d');
        if (!ctx) throw new Error('Failed to get 2D context.');
        if (scatterChart) {
          scatterChart.destroy();
        }
        let chartConfig;
        if (tab === 'lifecycle') {
          const houseAge = parseInt(document.getElementById('houseAge')?.value || 0);
          const top10 = getTop10Components(houseAge);
          const initialData = top10.map(c => ({
            x: c.lifespan,
            y: c.cost,
            pointRadius: 8,
            pointBorderWidth: 1,
            pointBorderColor: '#ffffff',
            component: c.name,
            riskScore: c.riskScore,
            status: c.status
          }));
          logWithTimestamp(`Lifecycle chart data: ${JSON.stringify(initialData.map(p => ({ component: p.component, riskScore: p.riskScore })))}`);
          chartConfig = {
            type: 'scatter',
            data: {
              datasets: [{
                label: 'Components',
                data: initialData,
                pointBackgroundColor: initialData.map(p => getRiskColor(p.riskScore)),
                pointBorderColor: '#ffffff',
                pointBorderWidth: 1,
                pointRadius: 8
              }]
            },
            options: {
              responsive: true,
              maintainAspectRatio: false,
              plugins: {
                legend: { display: false },
                title: { display: false },
                tooltip: {
                  padding: 10,
                  backgroundColor: '#ffffff',
                  titleColor: '#1f2937',
                  bodyColor: '#1f2937',
                  borderColor: '#d1d5db',
                  borderWidth: 1,
                  callbacks: {
                    label: ctx => {
                      const c = ctx.raw;
                      const component = allComponents.find(comp => comp.name === c.component);
                      if (!component) return [c.component, 'Error: Component not found'];
                      const houseAge = parseInt(document.getElementById('houseAge')?.value || 0);
                      const age = component.manualAge ?? houseAge;
                      const replacementWindow = component.lifespan * 0.1;
                      const cycle = Math.abs(age - component.lifespan) <= replacementWindow ? 0 : Math.floor(age / component.lifespan);
                      const lastReplacement = cycle * component.lifespan;
                      const currentAge = cycle === 0 ? age : age - lastReplacement;
                      const isHighVisibility = highVisibilityComponents.includes(component.name);
                      const postLifecycleWindow = isHighVisibility || component.cost >= 5000 ? component.lifespan * 0.2 : 0;
                      const displayAge = (age > component.lifespan && age <= component.lifespan + postLifecycleWindow) ? age : currentAge;
                      const cycleText = (age > component.lifespan && age <= component.lifespan + postLifecycleWindow) ? 'Overdue' : `Cycle ${cycle + 1}`;
                      return [
                        `${c.component}`,
                        `Yrs: ${c.x}`,
                        `$: ${c.y}`,
                        `Age: ${isFinite(displayAge) ? displayAge.toFixed(1) : 'N/A'} yrs (${cycleText})`,
                        c.status
                      ];
                    }
                  }
                }
              },
              scales: {
                x: {
                  title: { display: false },
                  min: 0,
                  max: maxLifespan,
                  ticks: {
                    font: { size: 11 },
                    color: '#1f2937',
                    callback: value => `${value} yrs`
                  },
                  grid: { color: '#e5e7eb' }
                },
                y: {
                  title: { display: false },
                  beginAtZero: true,
                  max: 25000,
                  ticks: {
                    font: { size: 11 },
                    color: '#1f2937',
                    stepSize: 6000,
                    callback: value => value >= 1000 ? `$${value / 1000}K` : `$${value}`
                  },
                  grid: { color: '#e5e7eb' }
                }
              },
              elements: { point: { radius: 8, hoverRadius: 8 } },
              animation: false,
              layout: { padding: { top: 10, bottom: 10, left: 12, right: 12 } }
            }
          };
        } else if (tab === 'defects') {
          const top5 = hiddenDefects
            .sort((a, b) => b.risk - a.risk)
            .slice(0, 5);
          logWithTimestamp(`Hidden Defects chart data: ${JSON.stringify(top5.map(d => ({ name: d.name, risk: d.risk })))}`);
          chartConfig = {
            type: 'bar',
            data: {
              labels: top5.map(d => d.name.split(' ').slice(0, 2).join(' ')),
              datasets: [{
                label: 'Hidden Defects',
                data: top5.map(d => d.risk),
                backgroundColor: top5.map(d => `rgba(249, 115, 22, ${0.8 + (d.risk / 100) * 0.2})`),
                borderColor: '#f97316',
                borderWidth: 1
              }]
            },
            options: {
              responsive: true,
              maintainAspectRatio: false,
              plugins: {
                legend: { display: false },
                title: { display: false },
                tooltip: {
                  padding: 10,
                  backgroundColor: '#ffffff',
                  titleColor: '#1f2937',
                  bodyColor: '#1f2937',
                  borderColor: '#d1d5db',
                  borderWidth: 1,
                  callbacks: {
                    label: ctx => {
                      const d = top5[ctx.dataIndex];
                      return [
                        `${d.name}`,
                        `${d.risk}% chance of issue, consider inspection`
                      ];
                    }
                  }
                }
              },
              scales: {
                x: {
                  title: { display: false },
                  ticks: {
                    font: { size: 11 },
                    color: '#1f2937'
                  },
                  grid: { display: false }
                },
                y: {
                  title: { display: false },
                  beginAtZero: true,
                  max: 100,
                  ticks: {
                    font: { size: 11 },
                    color: '#1f2937',
                    callback: value => `${value}%`
                  },
                  grid: { color: '#e5e7eb' }
                }
              },
              animation: false,
              layout: { padding: { top: 10, bottom: 10, left: 12, right: 12 } }
            }
          };
        } else if (tab === 'maintenance') {
          const top5 = immediateMaintenance
            .sort((a, b) => b.risk - a.risk)
            .slice(0, 5);
          logWithTimestamp(`Maintenance chart data: ${JSON.stringify(top5.map(d => ({ name: d.name, risk: d.risk })))}`);
          chartConfig = {
            type: 'bar',
            data: {
              labels: top5.map(d => d.name.split(' ').slice(0, 2).join(' ')),
              datasets: [{
                label: 'Immediate Maintenance',
                data: top5.map(d => d.risk),
                backgroundColor: top5.map(d => `rgba(37, 99, 235, ${0.8 + (d.risk / 100) * 0.2})`),
                borderColor: '#2563eb',
                borderWidth: 1
              }]
            },
            options: {
              responsive: true,
              maintainAspectRatio: false,
              plugins: {
                legend: { display: false },
                title: { display: false },
                tooltip: {
                  padding: 10,
                  backgroundColor: '#ffffff',
                  titleColor: '#1f2937',
                  bodyColor: '#1f2937',
                  borderColor: '#d1d5db',
                  borderWidth: 1,
                  callbacks: {
                    label: ctx => {
                      const d = top5[ctx.dataIndex];
                      return [
                        `${d.name}`,
                        `${d.risk}% chance of issue, consider inspection`
                      ];
                    }
                  }
                }
              },
              scales: {
                x: {
                  title: { display: false },
                  ticks: {
                    font: { size: 11 },
                    color: '#1f2937'
                  },
                  grid: { display: false }
                },
                y: {
                  title: { display: false },
                  beginAtZero: true,
                  max: 100,
                  ticks: {
                    font: { size: 11 },
                    color: '#1f2937',
                    callback: value => `${value}%`
                  },
                  grid: { color: '#e5e7eb' }
                }
              },
              animation: false,
              layout: { padding: { top: 10, bottom: 10, left: 12, right: 12 } }
            }
          };
        }
        scatterChart = new Chart(ctx, chartConfig);
        logWithTimestamp(`Chart initialized for tab: ${tab}`);
      } catch (error) {
        logWithTimestamp(`Chart initialization failed: ${error.message}`);
        const errorMessage = document.getElementById('errorMessage');
        if (errorMessage) {
          errorMessage.style.display = 'block';
          errorMessage.textContent = `Chart initialization failed: ${error.message}`;
        }
      }
    };

    const updateTable = (tab, houseAge) => {
      const tableHeader = document.getElementById(tab === 'lifecycle' ? 'tableHeader' : tab === 'defects' ? 'defectsTableHeader' : 'maintenanceTableHeader');
      const tableBody = document.getElementById(tab === 'lifecycle' ? 'componentsTableBody' : tab === 'defects' ? 'defectsTableBody' : 'maintenanceTableBody');
      if (!tableHeader || !tableBody) {
        logWithTimestamp('Table elements not found.');
        return;
      }
      if (tab === 'lifecycle') {
        tableHeader.innerHTML = `
          <tr>
            <th scope="col">Component</th>
            <th scope="col">Lifespan</th>
            <th scope="col">Cost</th>
            <th scope="col">Age</th>
          </tr>
        `;
        const top10 = getTop10Components(houseAge);
        tableBody.innerHTML = top10.length ? top10.map(c => {
          const age = c.manualAge ?? houseAge;
          const replacementWindow = c.lifespan * 0.1;
          const cycle = Math.abs(age - c.lifespan) <= replacementWindow ? 0 : Math.floor(age / c.lifespan);
          const lastReplacement = cycle * c.lifespan;
          const currentAge = cycle === 0 ? age : age - lastReplacement;
          const riskScore = c.riskScore;
          const riskClass = riskScore >= 0.3 ? 'at-risk' : '';
          const selectedRange = ageRanges.find(r => r.value === c.manualAge) || ageRanges[0];
          const backgroundColor = getBackgroundColor(riskScore);
          return `
            <tr class="${riskClass}" data-component="${c.name}" role="row" aria-label="${c.name} details" aria-describedby="risk-status-${c.name}" style="background-color: ${backgroundColor}">
              <td role="cell">${c.name}</td>
              <td role="cell">${c.lifespan}</td>
              <td role="cell">$${c.cost}</td>
              <td role="cell">
                <select data-component="${c.name}" aria-label="Age range of ${c.name}">
                  ${ageRanges.map(r => `<option value="${r.value}" ${selectedRange.value === r.value ? 'selected' : ''}>${r.label}</option>`).join('')}
                </select>
              </td>
              <td id="risk-status-${c.name}" style="display: none;">${c.status}</td>
            </tr>
          `;
        }).join('') : '<tr><td colspan="4" role="cell">No components nearing replacement.</td></tr>';
      } else if (tab === 'defects') {
        tableHeader.innerHTML = `
          <tr>
            <th scope="col">Defect</th>
            <th scope="col">Risk (%)</th>
          </tr>
        `;
        const top5 = hiddenDefects.sort((a, b) => b.risk - a.risk).slice(0, 5);
        tableBody.innerHTML = top5.map(d => `
          <tr class="at-risk" data-component="${d.name}" role="row" aria-label="${d.name} details" aria-describedby="risk-status-${d.name}" style="background-color: rgba(249, 115, 22, 0.1)">
            <td role="cell">${d.name}</td>
            <td role="cell">${d.risk}%</td>
            <td id="risk-status-${d.name}" style="display: none;">${d.risk}% chance of issue, consider inspection</td>
          </tr>
        `).join('');
      } else if (tab === 'maintenance') {
        tableHeader.innerHTML = `
          <tr>
            <th scope="col">Maintenance Item</th>
            <th scope="col">Risk (%)</th>
          </tr>
        `;
        const top5 = immediateMaintenance.sort((a, b) => b.risk - a.risk).slice(0, 5);
        tableBody.innerHTML = top5.map(d => `
          <tr class="at-risk" data-component="${d.name}" role="row" aria-label="${d.name} details" aria-describedby="risk-status-${d.name}" style="background-color: rgba(37, 99, 235, 0.1)">
            <td role="cell">${d.name}</td>
            <td role="cell">${d.risk}%</td>
            <td id="risk-status-${d.name}" style="display: none;">${d.risk}% chance of issue, consider inspection</td>
          </tr>
        `).join('');
      }
    };

    const updateSummary = (tab, houseAge) => {
      const summaryText = document.getElementById('summaryText');
      if (!summaryText) {
        logWithTimestamp('Summary element not found.');
        return;
      }
      if (tab === 'defects') {
        const defectCount = hiddenDefects.filter(d => d.risk >= 20).length;
        summaryText.textContent = `Most homes this age will contain ${defectCount} high cost/hidden defects.`;
      } else {
        summaryText.textContent = '';
      }
    };

    const scrollToTop = () => {
      requestAnimationFrame(() => {
        window.scrollTo(0, 0);
        logWithTimestamp('Scrolled to top');
      });
    };

    const switchTab = (tab) => {
      document.querySelectorAll('.screen').forEach(s => s.classList.remove('active'));
      document.querySelectorAll('.nav-item').forEach(n => n.classList.remove('active'));
      document.getElementById(`${tab}Screen`).classList.add('active');
      document.querySelector(`.nav-item[data-tab="${tab}"]`).classList.add('active');
      updateChart(tab);
    };

    const setupTabListeners = () => {
      document.querySelectorAll('.nav-item').forEach(item => {
        item.addEventListener('click', () => {
          const tab = item.getAttribute('data-tab');
          switchTab(tab);
        });
      });
    };

    const setupActionListeners = () => {
      document.querySelectorAll('.action-card').forEach(card => {
        card.addEventListener('click', () => {
          const action = card.getAttribute('data-action');
          if (action === 'setHouseAge') setHouseAge();
          else if (action === 'scanComponentAges') scanComponentAges();
          else if (action === 'viewRisks') viewRisks();
          else if (action === 'getPlan') getPlan();
        });
      });
    };

    const highlightChartPoint = (componentName) => {
      if (!scatterChart || !scatterChart.data.datasets[0].data[0].x) return;
      scatterChart.data.datasets.forEach(dataset => {
        dataset.data.forEach(point => {
          if (point.component === componentName) {
            point.pointRadius = 12;
            point.pointBorderWidth = 2;
            point.pointBorderColor = '#ffffff';
          } else {
            point.pointRadius = 8;
            point.pointBorderWidth = 1;
            point.pointBorderColor = '#ffffff';
          }
        });
      });
      scatterChart.update('none');
      setTimeout(() => {
        scatterChart.data.datasets.forEach(dataset => {
          dataset.data.forEach(point => {
            point.pointRadius = 8;
            point.pointBorderWidth = 1;
            point.pointBorderColor = '#ffffff';
          });
        });
        scatterChart.update('none');
      }, 2000);
    };

    const attachInputListeners = () => {
      document.addEventListener('change', e => {
        if (e.target.tagName === 'SELECT' && e.target.dataset.component) {
          logWithTimestamp(`Select event for component: ${e.target.dataset.component}, value: ${e.target.value}`);
          const componentName = e.target.dataset.component;
          const value = e.target.value;
          const component = allComponents.find(c => c.name === componentName);
          if (component) {
            if (value === 'max') {
              component.manualAge = component.lifespan;
            } else if (value === 'null') {
              component.manualAge = null;
            } else {
              component.manualAge = parseFloat(value);
            }
            updateChart('lifecycle');
          }
        }
      });

      document.addEventListener('click', e => {
        const row = e.target.closest('tr');
        if (row && row.dataset.component) {
          logWithTimestamp(`Table row clicked for component: ${row.dataset.component}`);
          highlightChartPoint(row.dataset.component);
        }
      });
    };

    const updateChart = (tab = 'lifecycle') => {
      logWithTimestamp(`updateChart called for tab: ${tab}`);
      try {
        const houseAge = parseInt(document.getElementById('houseAge')?.value || 0);
        if (!isFinite(houseAge)) {
          logWithTimestamp(`Invalid houseAge: ${houseAge}. Using 0.`);
          houseAge = 0;
        }
        logWithTimestamp(`House age: ${houseAge}`);
        const sliderContainer = document.getElementById('sliderContainer');
        const resetButton = document.getElementById('resetButton');
        const sliderValue = document.getElementById('houseAgeValue');
        if (sliderContainer) {
          sliderContainer.style.display = tab === 'lifecycle' ? 'flex' : 'none';
        }
        if (resetButton) {
          resetButton.style.display = tab === 'lifecycle' ? 'inline-block' : 'none';
        }
        if (sliderValue) {
          sliderValue.textContent = houseAge;
        }
        if (slider) {
          slider.setAttribute('aria-valuenow', houseAge);
        }
        initializeChart(tab);
        updateTable(tab, houseAge);
        updateSummary(tab, houseAge);
        const relevant = tab === 'lifecycle' ? getTop10Components(houseAge).filter(c => c.riskScore >= 0.3).slice(0, 3) :
          tab === 'defects' ? hiddenDefects.sort((a, b) => b.risk - a.risk).slice(0, 5) :
          immediateMaintenance.sort((a, b) => b.risk - a.risk).slice(0, 5);
        const relevantCount = document.getElementById('relevantCount');
        if (relevantCount) {
          relevantCount.textContent = `${relevant.length} at risk`;
        }
        scrollToTop();
        logWithTimestamp('Chart updated successfully.');
      } catch (error) {
        logWithTimestamp(`Chart update failed: ${error.message}`);
        const errorMessage = document.getElementById('errorMessage');
        if (errorMessage) {
          errorMessage.style.display = 'block';
          errorMessage.textContent = `Chart update failed: ${error.message}`;
        }
      }
    };

    const slider = document.getElementById('houseAge');
    const sliderValue = document.getElementById('houseAgeValue');
    const relevantCount = document.getElementById('relevantCount');
    const tableBody = document.getElementById('componentsTableBody');
    const resetButton = document.getElementById('resetButton');

    const requiredElements = { slider, sliderValue, relevantCount, tableBody, resetButton };
    for (const [name, element] of Object.entries(requiredElements)) {
      if (!element) {
        logWithTimestamp(`DOM element "${name}" not found.`);
        const errorMessage = document.getElementById('errorMessage');
        if (errorMessage) {
          errorMessage.style.display = 'block';
          errorMessage.textContent = `Required element "${name}" not found.`;
        }
      }
    }

    const debounce = (func, wait) => {
      let timeout;
      return function executedFunction(...args) {
        const later = () => {
          clearTimeout(timeout);
          func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
      };
    };

    if (!window.Chart) {
      logWithTimestamp('Chart.js not loaded.');
      const errorMessage = document.getElementById('errorMessage');
      if (errorMessage) {
        errorMessage.style.display = 'block';
        errorMessage.textContent = 'Chart.js failed to load. Please refresh the page.';
      }
    } else {
      if ('scrollRestoration' in history) {
        history.scrollRestoration = 'manual';
        logWithTimestamp('Scroll restoration disabled');
      }

      if (slider) {
        slider.addEventListener('input', e => {
          logWithTimestamp(`Slider input event, value: ${e.target.value}`);
          const houseAge = parseInt(e.target.value) || 0;
          if (sliderValue) {
            sliderValue.textContent = houseAge;
          }
          slider.setAttribute('aria-valuenow', houseAge);
          debounce(() => updateChart('lifecycle'), 150)();
        });
        slider.addEventListener('change', e => {
          logWithTimestamp(`Slider change event, value: ${e.target.value}`);
          const houseAge = parseInt(e.target.value) || 0;
          if (sliderValue) {
            sliderValue.textContent = houseAge;
          }
          slider.setAttribute('aria-valuenow', houseAge);
          updateChart('lifecycle');
        });
        attachInputListeners();
      } else {
        logWithTimestamp('Slider not found.');
      }

      if (resetButton) {
        resetButton.addEventListener('click', () => {
          logWithTimestamp('Reset button clicked.');
          allComponents.forEach(c => c.manualAge = null);
          if (slider) slider.value = 0;
          if (sliderValue) sliderValue.textContent = '0';
          updateChart('lifecycle');
        });
      }

      setupTabListeners();
      setupActionListeners();

      const urlParams = new URLSearchParams(window.location.search);
      const initialHouseAge = parseInt(urlParams.get('houseAge')) || 0;
      if (slider) {
        slider.value = initialHouseAge;
        if (sliderValue) sliderValue.textContent = initialHouseAge;
        slider.setAttribute('aria-valuenow', initialHouseAge);
        logWithTimestamp(`Initial chart update with houseAge: ${initialHouseAge}`);
        initializeChart('lifecycle');
        updateChart('lifecycle');
      }
    }
  </script>
</body>
</html>
